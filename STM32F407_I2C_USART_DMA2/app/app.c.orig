#include "app.h"

void ExecutorTerminal_USART_Irq(void)
{
char receivedStringConsole1[SIZE_BUF_USART];

	USART1_ReadChar(receivedChar); // Читаем из консоли

	__disable_irq();

//	while (I2C_Master_TransmitDMA(I2C_ADDRESS, (uint8_t*)receivedStringConsole, BUFFER_SIZE_I2C) != 0)
//	{
//		Error_Handler();
//	}

//	while (I2C_Master_ReceiveT(I2C_ADDRESS, (uint8_t*)rezultRead, BUFFER_SIZE_I2C) != 0)
//	{
//		Error_Handler();
//	}

//				for (int i = 0; i < SIZE_BUF_USART; i++)
//									{
//										uint8_t temp = receivedStringConsole1[i];
//										rezultRead1[i]=temp;
//									}
//	rezultRead1[count_size_buf]=receivedStringConsole1[0];
//count_size_buf--;
	
	__enable_irq();
		

	//USART1_SetString(rezultRead);
if(count_size_buf >= SIZE_BUF_USART)
{
	count_size_buf=0;
	USART1_SetString(rezultRead);
}
else
{
	rezultRead[count_size_buf]=receivedChar_;
	count_size_buf++;
}

}

void ExecutorTerminal_USART_DMA_Irq(void)
{

	USART1_DMA2_ReadString(receivedStringConsole,SIZE_BUF_USART); // Читаем из консоли

	__disable_irq();

//	while (I2C_Master_TransmitDMA(I2C_ADDRESS, (uint8_t*)receivedStringConsole, BUFFER_SIZE_I2C) != 0)
//	{
//		Error_Handler();
//	}

//	while (I2C_Master_ReceiveT(I2C_ADDRESS, (uint8_t*)rezultRead, BUFFER_SIZE_I2C) != 0)
//	{
//		Error_Handler();
//	}

			for (int i = 0; i < SIZE_BUF_USART; i++)
									{
										uint8_t temp = receivedStringConsole[i];
										rezultRead[i]=temp;
									}


	__enable_irq();

	USART1_DMA2_SetString(rezultRead, SIZE_BUF_USART);

	//temp
//	USART1_DMA2_ReadString(receivedStringConsole,SIZE_BUF_USART);
//			for (int i = 0; i < SIZE_BUF_USART; i++)
//									{
//										uint8_t temp = receivedStringConsole[i];
//										rezultRead[i]=temp;
//									}
//	USART1_DMA2_SetString(rezultRead, SIZE_BUF_USART);
}


/////////////////

int main()
{
	Init_LED();
	Init_USART1(BAUND_RATE);
	Init_I2C();

	while (1)
	{

	}

	return 0;
}